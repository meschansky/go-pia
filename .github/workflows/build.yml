name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        go-version: [ '1.21' ]
        goos: [ 'linux' ]
        goarch: [ 'amd64', 'arm64', 'arm' ]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Build
      run: |
        # Create output directory
        mkdir -p bin

        # Set binary name based on OS
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME=go-pia-port-forwarding.exe
        else
          BINARY_NAME=go-pia-port-forwarding
        fi

        # Build the binary
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o bin/$BINARY_NAME ./cmd/go-pia-port-forwarding

        # Create distribution package
        mkdir -p dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}
        cp bin/$BINARY_NAME dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}/
        cp ca.rsa.4096.crt dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}/
        cp go-pia-port-forwarding.service dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}/
        cp LICENSE dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}/
        cp README.md dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}/
        cp AUTOMATION.md dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}/
        cp CA_CERTIFICATE.md dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}/

        # Create archive
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r go-pia-${{ matrix.goos }}-${{ matrix.goarch }}.zip go-pia-${{ matrix.goos }}-${{ matrix.goarch }}
        else
          tar -czvf go-pia-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz go-pia-${{ matrix.goos }}-${{ matrix.goarch }}
        fi
        cd ..

    - name: Test
      run: go test -v ./...

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-pia-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/go-pia-${{ matrix.goos }}-${{ matrix.goarch }}.*
        retention-days: 30

  # Create releases for commits to main branch
  main-branch-release:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          # Move all artifacts to release directory
          find artifacts -type f -name "*.zip" -o -name "*.tar.gz" | xargs -I{} cp {} release/

          # Add additional files
          cp ca.rsa.4096.crt release/
          cp go-pia-port-forwarding.service release/
          cp LICENSE release/
          cp README.md release/
          cp CA_CERTIFICATE.md release/

      - name: Generate release name
        id: release_name
        run: |
          # Get short commit hash
          SHORT_HASH=$(git rev-parse --short HEAD)
          # Get current date in YYYY-MM-DD format
          DATE=$(date +"%Y-%m-%d")
          # Set release name
          echo "name=main-${DATE}-${SHORT_HASH}" >> $GITHUB_OUTPUT
          echo "title=Development build ${DATE} (${SHORT_HASH})" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.release_name.outputs.title }}
          tag_name: ${{ steps.release_name.outputs.name }}
          files: |
            release/*.tar.gz
            release/ca.rsa.4096.crt
            release/go-pia-port-forwarding.service
            release/LICENSE
            release/README.md
          draft: false
          prerelease: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create GitHub release for tagged versions
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        # Move all artifacts to release directory
        find artifacts -type f -name "*.zip" -o -name "*.tar.gz" | xargs -I{} cp {} release/

        # Add additional files
        cp ca.rsa.4096.crt release/
        cp go-pia-port-forwarding.service release/
        cp LICENSE release/
        cp README.md release/
        cp CA_CERTIFICATE.md release/

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*.tar.gz
          release/ca.rsa.4096.crt
          release/go-pia-port-forwarding.service
          release/LICENSE
          release/README.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
